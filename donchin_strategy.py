# -*- coding: utf-8 -*-
"""Donchin strategy

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17bfMhN9oErDWFqamQKnS1iEd_RF56U6q
"""

pip install yfinance

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.pylab import rcParams
rcParams['figure.figsize'] = 5, 5
import yfinance as yf

result = yf.download('^NSEI', start = "2000-01-01")

def DONCHIAN(hi, lo, n):
    hi = pd.Series(hi)
    lo = pd.Series(lo)
    uc = hi.rolling(n, min_periods=n).max()
    lc = lo.rolling(n, min_periods=n).min()
    mc = (uc + lc) / 2
    return lc, mc, uc
tf = DONCHIAN(result.High, result.Low, 20)
nf = pd.DataFrame(tf)
nf = nf.T
nf = nf.rename(columns={'Low':'Donchain_Low','High':'Dochain_High', 'Unnamed 0':'Base_line'})
result = result.Close.to_frame()
result = pd.concat([result, nf.reindex(result.index)], axis=1)
result['MA'] = result.Close.rolling(200).mean()
result = result.dropna()

result

result[:300].plot()

# BUY condition
result['signal'] = np.where((result['Close'] > result['MA']) & (result['Close'] > result['Base_line']) & (result['Close'].shift(1) <= result['Base_line']),1,0)
# SELL condition
result['signal'] = np.where((result['Close'] < result['MA']) | ((result['Close'] < result['Base_line']) & (result['Close'].shift(1) >= result['Base_line'])),-1 ,result['signal'])
# creating long and short positions
result['position'] = result['signal'].replace(to_replace=0, method='ffill')
# shifting by 1, to account of close price return calculations
result['position'] = result['position'].shift(1)
result['position'] = result['position'].replace(-1, 0)
# calculating buy and hold strategy returns
result['bnh_returns'] = np.log(result['Close']/result['Close'].shift(1))
# calculating stretegy returns
result['strategy_returns'] = result['bnh_returns'] * (result['position'])

result

plt.figure(figsize = (25,5))
plt.plot(result['position'])

# comparing buy & hold strategy / bollinger bands strategy returns
print("Buy and hold returns:",result['bnh_returns'].cumsum()[-1])
print("Strategy returns:",result['strategy_returns'].cumsum()[-1])

# plotting strategy historical performance over time
result[['bnh_returns','strategy_returns']] = result[['bnh_returns','strategy_returns']].cumsum().apply(np.exp)
result[['bnh_returns','strategy_returns']].plot(grid=True, figsize=(7, 7))

result['Change'] = result['position'] - result.position.shift(1)
result

np.count_nonzero(result.Change)